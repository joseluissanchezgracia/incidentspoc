apiVersion: v1
kind: Template
labels:
  template: incidentsproject-client-template
message: An incidents project frontend service has been created in your project.
metadata:
  annotations:
    description: |-
      View layer and REST client for management of police incidents information
    iconClass: icon-spring
    tags: instant-app,incidentsproject
  name: incidentsproject-client
objects:
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: "${APPLICATION_NAME}"
    name: ${APPLICATION_NAME}
  spec:
    host: "${APPLICATION_NAME}.helix.everis.cloud"
    path: /
    to:
      kind: Service
      name: ${APPLICATION_NAME}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    replicas: 1
    selector:
      name: ${APPLICATION_NAME}
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          name: ${APPLICATION_NAME}
      spec:
        containers:
        - capabilities: {}
          name: "${APPLICATION_NAME}"
          env:
          - name: INCIDENTS_CLIENT_SERVER_URL
            value: ${INCIDENTS_CLIENT_SERVER_URL}
          image: ${REGISTRY}/incidentsproject-client:latest
          resources:
            limits:
              cpu: ${CPU_LIMIT}
              memory: ${MEMORY_LIMIT}
            requests:
              cpu: ${CPU_REQUEST}
              memory: ${MEMORY_REQUEST}
          livenessProbe:
            httpGet:
              path: /incidents-client/admin/home
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            timeoutSeconds: 20
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /incidents-client/admin/home
              port: 8080
              scheme: HTTP
            timeoutSeconds: 5
            periodSeconds: 10
          imagePullPolicy: Always
          securityContext:
            capabilities: {}
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}
        from:
          kind: ImageStreamTag
          name: incidentsproject-client:latest
      type: ImageChange
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: "${APPLICATION_NAME}"
    name: ${APPLICATION_NAME}
  spec:
    ports:
    - name: web
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      name: "${APPLICATION_NAME}"
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      app: "${APPLICATION_NAME}"
    name: ${APPLICATION_NAME}
  spec:
    runPolicy: SerialLatestOnly
    triggers:
      - type: "Generic"
        generic:
          secret: "secret101"
          allowEnv: true
    source:
      git:
        uri: ${GIT_URL}
    strategy:
      dockerStrategy:
        dockerfilePath: Dockerfile
        env:
          - name: ARTIFACT_URL
            value: http://localhost:8081/repository/maven-public
    output:
      to:
        kind: ImageStreamTag
        name: incidentsproject-client:latest
parameters:
- description: The name for the application.
  displayName: Application name
  name: APPLICATION_NAME
  value: incidentsproject-client
  required: true
- description: The URL in order to connect with incidents project REST  server
  displayName: Incidents server URL
  name: INCIDENTS_CLIENT_SERVER_URL
  value: http://incidentsproject-server:8080/incidents-server/admin
  required: true
- description: Docker registry containing the image
  displayName: Docker registry host, port and project
  name: REGISTRY
  value: 172.30.6.125:5000/orangesandbox
  required: true
- description: Git registry containing Dockerfile and artifacts for build image
  displayName: Git registry with build artifacts
  name: GIT_URL
  value: https://incidentsproject-git.helix.everis.cloud/root/incidents-client-build
  required: true
- description: "Minimum ammount needed for the pod to run correctly. It is used by openshift to decide in which node to deploy the pod. However, if the node has more memory available, the pod will be able to use more than this value.  It is specified in MegaBytes ex: 1024Mi."
  displayName: Memory request
  name: MEMORY_REQUEST
  value: 768Mi
  required: true
- description: "The maximum ammount of memory this pod is allowed to use.  If the container exceeds the specified memory limit, it will be terminated and potentially restarted dependent upon the container restart policy. It is specified in MegaBytes ex: 1024Mi."
  displayName: Memory Limit
  name: MEMORY_LIMIT
  value: 1024Mi
  required: true
- description: "Minimum ammount of CPU required for the pod to run correctly. This value will be used by OpenShift to decide in which node the pod should be deployed. However, if the node has more cpu millicores available, the pod will be allowed to use more than this value. It is specified in millicores (1 core = 1000 millicores). Ex: 500m"
  displayName: Cpu Requests
  name: CPU_REQUEST
  value: 200m
  required: true
- description: "Maximum amount of CPU this pod is allowed to use. If the pod uses more than this value, OpenShift will throttle it (I will reduce the ammount of time the pod is allowed to run in the CPU) until it's cpu usage drops down to within it's limit range. It is specified in millicores (1 core = 1000 millicores). Ex: 500m" 
  displayName: Cpu Limit
  name: CPU_LIMIT
  value: 400m
  required: true